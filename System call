#include <iostream>      // For std::cout and std::cerr
#include <sys/stat.h>    // For lstat() and struct stat
#include <unistd.h>      // For POSIX functions
#include <cstring>       // For strerror()
#include <errno.h>       // For errno

int main() {
    const char* path = "sample.txt";  // Path to the file or symbolic link

    struct stat fileStat;

    // lstat gets file status without following symbolic links
    if (lstat(path, &fileStat) == -1) {
        std::cerr << "Error using lstat on '" << path << "': " << strerror(errno) << std::endl;
        return 1;
    }
    std::cout << "File information for: " << path << std::endl;
    std::cout << "-------------------------------" << std::endl;
    std::cout << "Size: " << fileStat.st_size << " bytes" << std::endl;
    std::cout << "Inode: " << fileStat.st_ino << std::endl;
    std::cout << "Hard Links: " << fileStat.st_nlink << std::endl;

    // Check file type
    if (S_ISREG(fileStat.st_mode)) {
        std::cout << "Type: Regular file" << std::endl;
    } else if (S_ISDIR(fileStat.st_mode)) {
        std::cout << "Type: Directory" << std::endl;
    } else if (S_ISLNK(fileStat.st_mode)) {
        std::cout << "Type: Symbolic link" << std::endl;
    } else {
        std::cout << "Type: Other" << std::endl;
    }

    return 0;

How to Run This:

1. Create a sample file:
echo "Hello" > sample.txt

2. (Optional) Create a symbolic link:
ln -s sample.txt symlink.txt

3. Compile the C++ code:
g++ lstat_simple.cpp -o lstat_simple

4. Run the program:
./lstat_simple


---

This will output file details, and if you run it on a symlink, lstat() will report info about the link itself, not the target.

Example Usage of lstat()

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    struct stat fileStat;

    // Check if the user provided a filename as an argument
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return EXIT_FAILURE;
    }

    // Call lstat() on the provided filename
    if (lstat(argv[1], &fileStat) < 0) {
        perror("lstat");
        return EXIT_FAILURE;
    }

    // Print file information
    printf("Information for %s:\n", argv[1]);
    printf("File Size: %lld bytes\n", (long long)fileStat.st_size);
    printf("Number of Links: %ld\n", (long)fileStat.st_nlink);
    printf("File inode: %lu\n", (unsigned long)fileStat.st_ino);
    printf("File type: ");

    // Determine file type
    if (S_ISREG(fileStat.st_mode)) {
        printf("regular file\n");
    } else if (S_ISDIR(fileStat.st_mode)) {
        printf("directory\n");
    } else if (S_ISLNK(fileStat.st_mode)) {
        printf("symbolic link\n");
    } else if (S_ISCHR(fileStat.st_mode)) {
        printf("character device\n");
    } else if (S_ISBLK(fileStat.st_mode)) {
        printf("block device\n");
    } else if (S_ISFIFO(fileStat.st_mode)) {
        printf("FIFO/pipe\n");
    } else if (S_ISSOCK(fileStat.st_mode)) {
        printf("socket\n");
    } else {
        printf("unknown type\n");
    }

    return EXIT_SUCCESS;
}




